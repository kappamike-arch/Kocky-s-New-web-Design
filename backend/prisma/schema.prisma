generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  name              String?
  role              UserRole           @default(CUSTOMER)
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  foodTruckBookings FoodTruckBooking[]
  mobileBarBookings MobileBarBooking[]
  orders            Order[]
  reservations      Reservation[]
  sessions          Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reservation {
  id               String            @id @default(cuid())
  userId           String?
  guestName        String
  guestEmail       String
  guestPhone       String
  date             DateTime
  time             String
  partySize        Int
  specialRequests  String?
  status           ReservationStatus @default(PENDING)
  confirmationCode String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User?             @relation(fields: [userId], references: [id])
}

model FoodTruckBooking {
  id               String                 @id @default(cuid())
  userId           String?
  contactName      String
  contactEmail     String
  contactPhone     String
  companyName      String?
  eventDate        DateTime
  eventTime        String
  eventDuration    Int
  eventLocation    String
  eventType        String
  expectedGuests   Int
  budget           Decimal?
  menuPreferences  String?
  additionalNotes  String?
  status           FoodTruckBookingStatus @default(PENDING)
  confirmationCode String                 @unique
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  user             User?                  @relation(fields: [userId], references: [id])
}

model MobileBarBooking {
  id               String                 @id @default(cuid())
  userId           String?
  contactName      String
  contactEmail     String
  contactPhone     String
  eventDate        DateTime
  eventTime        String
  eventDuration    Int
  eventLocation    String
  eventType        String
  expectedGuests   Int
  packageType      MobileBarPackage
  addOns           Json
  specialRequests  String?
  budget           Decimal?
  status           MobileBarBookingStatus @default(PENDING)
  confirmationCode String                 @unique
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  user             User?                  @relation(fields: [userId], references: [id])
}

model NewsletterSubscriber {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  subscribed     Boolean   @default(true)
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?
  mailchimpId    String?   @unique
  tags           Json
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model MenuItem {
  id              String       @id @default(cuid())
  name            String
  description     String?
  category        MenuCategory
  menuType        MenuType     @default(REGULAR)
  sectionId       String?
  price           Decimal
  happyHourPrice  Decimal?
  image           String?
  servingSize     String?
  preparationTime Int?
  available       Boolean      @default(true)
  featured        Boolean      @default(false)
  sortOrder       Int          @default(0)
  tags            Json
  allergens       Json
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  section         MenuSection? @relation(fields: [sectionId], references: [id])
  orderItems      OrderItem[]

  @@index([menuType])
  @@index([sectionId])
}

model Order {
  id                  String      @id @default(cuid())
  userId              String?
  customerName        String
  customerEmail       String
  customerPhone       String
  orderType           OrderType
  status              OrderStatus @default(PENDING)
  subtotal            Decimal
  tax                 Decimal
  tip                 Decimal?
  total               Decimal
  paymentMethod       String?
  paymentIntentId     String?     @unique
  pickupTime          DateTime?
  deliveryAddress     String?
  specialInstructions String?
  confirmationCode    String      @unique
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  user                User?       @relation(fields: [userId], references: [id])
  items               OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Decimal
  notes      String?
  createdAt  DateTime @default(now())
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model HappyHour {
  id          String   @id @default(cuid())
  dayOfWeek   Int
  startTime   String
  endTime     String
  description String?
  active      Boolean  @default(true)
  specials    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PageContent {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  heroTitle       String?
  heroSubtitle    String?
  heroImage       String?
  heroVideo       String?
  heroLogo        String?
  content         String?
  metaTitle       String?
  metaDescription String?
  customCss       String?
  customJs        String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([slug])
}

model MenuSection {
  id          String      @id @default(cuid())
  name        String
  description String?
  menuType    MenuType    @default(REGULAR)
  displayMode DisplayMode @default(FULL_DETAILS)
  sortOrder   Int         @default(0)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  menuItems   MenuItem[]

  @@index([menuType])
}

model GalleryItem {
  id           String   @id @default(cuid())
  title        String
  description  String?
  imageUrl     String
  thumbnailUrl String?
  category     String?
  tags         Json     @default("[]")
  sortOrder    Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([category])
}

model ContactInquiry {
  id               String        @id @default(cuid())
  name             String
  email            String
  phone            String?
  subject          String
  message          String
  serviceType      ServiceType   @default(GENERAL)
  eventDate        DateTime?
  eventLocation    String?
  guestCount       Int?
  companyName      String?
  status           InquiryStatus @default(NEW)
  priority         Priority      @default(NORMAL)
  assignedTo       String?
  tags             Json?
  source           String?
  confirmationCode String?       @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  eventTime        String?
  emailLogs        EmailLog[]
  notes            InquiryNote[]
  quotes           Quote[]
}

model Quote {
  id               String         @id @default(cuid())
  inquiryId        String
  quoteNumber      String         @unique
  amount           Decimal?
  validUntil       DateTime?
  serviceDetails   String
  terms            String?
  notes            String?
  status           QuoteStatus    @default(DRAFT)
  sentToCustomer   Boolean        @default(false)
  sentAt           DateTime?
  viewedByCustomer Boolean        @default(false)
  viewedAt         DateTime?
  acceptedAt       DateTime?
  rejectedAt       DateTime?
  rejectionReason  String?
  createdBy        String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  paidAt           DateTime?
  balanceDue       Decimal?
  depositAmount    Decimal?
  depositDueDate   DateTime?
  depositPaidAt    DateTime?
  depositType      String?
  paymentLink      String?
  stripePaymentId  String?
  balanceDueDate   DateTime?
  gratuityRate     Decimal?       @default(0)
  pdfUrl           String?
  taxRate          Decimal?       @default(0)
  emailLogs        EmailLog[]
  inquiry          ContactInquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  quoteItems       QuoteItem[]
}

model QuoteItem {
  id          String   @id @default(cuid())
  quoteId     String
  description String
  quantity    Int      @default(1)
  unitPrice   Decimal
  total       Decimal
  notes       String?
  createdAt   DateTime @default(now())
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

model EmailLog {
  id             String          @id @default(cuid())
  inquiryId      String?
  quoteId        String?
  type           EmailType
  recipient      String
  subject        String
  body           String
  status         EmailStatus     @default(PENDING)
  sentAt         DateTime?
  failedAt       DateTime?
  failureReason  String?
  openedAt       DateTime?
  clickedLinks   Json?
  metadata       Json?
  createdAt      DateTime        @default(now())
  recipientEmail String?
  recipientName  String?
  quote          Quote?          @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  inquiry        ContactInquiry? @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
}

model EmailAccount {
  id           String    @id @default(cuid())
  accountType  String
  email        String
  displayName  String
  provider     String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean   @default(true)
  lastRefresh  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([accountType, email])
}

model EmailTemplate {
  id        Int      @id @default(autoincrement())
  name      String
  subject   String
  body      String
  sender    String?
  category  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InquiryNote {
  id         String         @id @default(cuid())
  inquiryId  String
  note       String
  isInternal Boolean        @default(true)
  createdBy  String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  inquiry    ContactInquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
}

model Settings {
  id                  String   @id @default(cuid())
  siteName            String   @default("Kocky's Bar & Grill")
  siteDescription     String?
  contactEmail        String
  contactPhone        String
  address             String
  city                String
  state               String
  zipCode             String
  country             String
  businessHours       Json
  socialMedia         Json
  emailSettings       Json
  paymentSettings     Json
  reservationSettings Json
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  onlineOrderingUrl   String?
}

model HeroSettings {
  id              String   @id @default(cuid())
  pageId          String   @unique
  pageName        String
  pageSlug        String
  useLogo         Boolean  @default(true)
  logoUrl         String?
  title           String?
  subtitle        String?
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  backgroundImage String?
  backgroundVideo String?
  mediaPreference String?  @default("auto")
}

model ServiceSettings {
  id          String   @id @default(cuid())
  serviceId   String   @unique
  serviceName String
  title       String
  subtitle    String
  description String
  packages    Json
  features    Json
  heroImage   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuotePackage {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  price       Decimal
  priceType   String   @default("FLAT")
  items       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuoteConfigItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  unitPrice   Decimal
  unit        String   @default("EACH")
  taxable     Boolean  @default(true)
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuoteLabor {
  id          String   @id @default(cuid())
  role        String
  description String?
  rateType    String   @default("HOURLY")
  rate        Decimal
  minHours    Decimal? @default(4)
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuoteTax {
  id          String   @id @default(cuid())
  name        String
  rate        Decimal
  description String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuoteGratuity {
  id            String   @id @default(cuid())
  name          String
  percentage    Decimal
  minGuestCount Int?
  isAutoApply   Boolean  @default(false)
  isDefault     Boolean  @default(false)
  description   String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GalleryImage {
  id           String   @id @default(cuid())
  title        String?
  caption      String?
  url          String
  thumbnailUrl String?
  width        Int?
  height       Int?
  size         Int?
  mimeType     String?
  order        Int      @default(0)
  isActive     Boolean  @default(true)
  tags         Json?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([order])
  @@index([isActive])
}

model JobApplication {
  id          String               @id @default(cuid())
  fullName    String
  email       String
  phone       String
  position    JobPosition
  resumeUrl   String?
  coverLetter String?
  status      JobApplicationStatus @default(PENDING)
  reviewedBy  String?
  reviewedAt  DateTime?
  notes       String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@index([status])
  @@index([position])
  @@index([createdAt])
}

model JobPageSettings {
  id           String   @id @default(cuid())
  heroImage    String?
  heroTitle    String   @default("Join Our Team")
  heroSubtitle String   @default("Be part of the Kocky's family - where great food meets great people")
  introText    String   @default("We're always looking for passionate individuals to join our team")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model InboxEmail {
  id               String    @id @default(cuid())
  messageId        String
  subject          String
  sender           String
  senderEmail      String
  body             String
  bodyPreview      String?
  receivedDateTime DateTime
  isRead           Boolean   @default(false)
  hasAttachments   Boolean   @default(false)
  attachments      Json?
  mailboxEmail     String
  conversationId   String?
  importance       String    @default("normal")
  categories       Json?
  autoReplied      Boolean   @default(false)
  autoReplyAt      DateTime?
  lastSync         DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([messageId, mailboxEmail])
  @@index([mailboxEmail, receivedDateTime])
  @@index([senderEmail])
  @@index([isRead])
}

model SentEmail {
  id           String   @id @default(cuid())
  fromEmail    String
  toEmails     Json
  ccEmails     Json?
  bccEmails    Json?
  subject      String
  body         String
  sentAt       DateTime
  method       String
  status       String
  messageId    String?
  errorMessage String?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([fromEmail, sentAt])
  @@index([status])
}

model EmailContact {
  id             String       @id @default(cuid())
  email          String       @unique
  firstName      String?
  lastName       String?
  phone          String?
  tags           Json         @default("[]")
  consentEmail   Boolean      @default(true)
  consentSms     Boolean      @default(false)
  unsubscribedAt DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  events         EmailEvent[]

  @@index([email])
  @@index([consentEmail])
  @@index([unsubscribedAt])
}

model EmailMarketingTemplate {
  id        String          @id @default(cuid())
  name      String
  slug      String          @unique
  mjml      String
  html      String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  campaigns EmailCampaign[]

  @@index([slug])
}

model EmailCampaign {
  id          String                  @id @default(cuid())
  name        String
  subject     String
  fromName    String?
  fromEmail   String
  templateId  String?
  html        String?
  status      CampaignStatus          @default(DRAFT)
  segmentTags Json                    @default("[]")
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  template    EmailMarketingTemplate? @relation(fields: [templateId], references: [id])
  events      EmailEvent[]

  @@index([status])
  @@index([scheduledAt])
  @@index([sentAt])
}

model EmailEvent {
  id         String         @id @default(cuid())
  contactId  String
  campaignId String?
  type       EmailEventType
  meta       Json?
  createdAt  DateTime       @default(now())
  campaign   EmailCampaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact    EmailContact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([contactId])
  @@index([campaignId])
  @@index([type])
  @@index([createdAt])
}

enum UserRole {
  CUSTOMER
  STAFF
  ADMIN
  SUPER_ADMIN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum FoodTruckBookingStatus {
  PENDING
  CONTACTED
  QUOTE_SENT
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum MobileBarPackage {
  BASIC
  STANDARD
  PREMIUM
  CUSTOM
}

enum MobileBarBookingStatus {
  PENDING
  CONTACTED
  QUOTE_SENT
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum MenuCategory {
  APPETIZER
  ENTREE
  DESSERT
  DRINK
  BEER
  WINE
  COCKTAIL
  NON_ALCOHOLIC
  SPECIAL
}

enum MenuType {
  REGULAR
  HAPPY_HOUR
  BRUNCH
  SPECIALS
}

enum DisplayMode {
  FULL_DETAILS
  TITLE_ONLY
}

enum OrderType {
  PICKUP
  DELIVERY
  DINE_IN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  COMPLETED
  CANCELLED
  REFUNDED
}

enum ServiceType {
  FOOD_TRUCK
  MOBILE_BAR
  CATERING
  RESERVATION
  GENERAL
}

enum InquiryStatus {
  NEW
  CONTACTED
  QUOTED
  NEGOTIATING
  WON
  LOST
  ARCHIVED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
  REVISED
  DEPOSIT_PAID
  PAID
  CANCELED
  REFUNDED
}

enum EmailType {
  CONFIRMATION
  QUOTE
  FOLLOW_UP
  REMINDER
  THANK_YOU
  MARKETING
  CUSTOM
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
}

enum JobPosition {
  SERVER
  BARTENDER
  COOK
  HOST
  OTHER
}

enum JobApplicationStatus {
  PENDING
  REVIEWING
  INTERVIEW_SCHEDULED
  INTERVIEWED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

enum EmailEventType {
  SENT
  OPEN
  CLICK
  BOUNCE
  COMPLAINT
  UNSUBSCRIBE
}

enum RSVPStatus {
  CONFIRMED
  CANCELLED
  WAITLIST
}

model Event {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  description   String?
  startAt       DateTime
  endAt         DateTime?
  venueName     String?
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  zip           String?
  heroImageUrl  String?
  videoUrl      String?
  isPublished   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([slug])
  @@index([isPublished])
  @@index([startAt])
}
